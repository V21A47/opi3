<project name="${projectName}" default="build">

    <property file="ant.properties"/>

    <!--  Jar files to be included to the project  -->
    <path id="classpath">
        <fileset dir="${libs}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="./lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="junit" classname="${antJUnitPath}">
        <classpath refid="classpath"/>
    </taskdef>



    <target name="compile" description="A compile task for all .java files">
        <mkdir dir="${build}"/>

        <!-- Just uncomment this block to run it on helios (and block the next one!)

        <javac fork="true" executable="/usr/jdk/jdk1.8.0/bin/javac" destdir="${build}" includeantruntime="false" srcdir="${src}"/>

        <javac fork="true" executable="/usr/jdk/jdk1.8.0/bin/javac" destdir="${build}" includeantruntime="false" srcdir="${testPath}" classpathref="classpath"/>
        -->

        <!-- Compile all project's files -->
        <javac fork="true" target="1.6" source="1.6" destdir="${build}" includeantruntime="false" srcdir="${src}"/>
        <!-- Compile test's files-->
        <javac fork="true" target="1.6" source="1.6" destdir="${build}" includeantruntime="false" srcdir="${testPath}" classpathref="classpath"/>

    </target>



    <target name="build" depends="compile" description="The jar making task">
        <!-- Creates the manifest file which has a version information -->
        <manifest file="${build}/MANIFEST.MF">
            <attribute name="Main-Class" value="${mainClass}"/>
            <attribute name="Specification-Version" value="${specificationVersion}"/>
            <attribute name="Implementation-Version" value="${implementationVersion}"/>
        </manifest>

        <!-- Creates jar file which has all project's files except tests -->
        <jar destfile="${projectName}.jar" manifest="${build}/MANIFEST.MF">
            <fileset dir="${build}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
            </fileset>
        </jar>
    </target>



    <target name="clean">
        <delete dir="${build}"/>
        <delete file="${projectName}.jar"/>
        <delete file="${diff}"/>
        <delete file="${err}"/>
    </target>



    <target name="test" depends="build" description="Tests the project">
        <junit printsummary="on" haltonfailure="no" fork="true">

            <classpath refid="classpath"/>

            <classpath location="${projectName}.jar"/>

            <formatter type="plain" usefile="false" />

            <batchtest>
                <fileset dir="${build}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>

        </junit>
    </target>



    <target name="history">
        <trycatch>
            <try>
                <antcall target="compile"/>
            </try>
            <catch>
                <touch file="${diff}"></touch>
                <touch file="${err}"></touch>
                    <exec dir="./${src}" executable="git" append="true" errorproperty="resets_err">
                        <arg value="diff"/>
                        <arg value="HEAD~1"/>
                        <redirector output="${diff}"/>
                    </exec>
                    <exec dir="./${src}"  executable="git" errorproperty="resets_err" >
                        <arg value="reset"/>
                        <arg value="--hard"/>
                        <arg value="HEAD^"/>
                    </exec>
                <if>
                    <not>
                        <isset  property="resets_err" />
                    </not>
                    <then>
                        <antcall target="recur"/>
                    </then>
                </if>
            </catch>
        </trycatch>
    </target>
    <target name = "recur" depends="history" />



    <target name="native2ascii">
        <native2ascii src="${localization}" dest="${build}/l4" ext=".properties"/>
    </target>

</project>
